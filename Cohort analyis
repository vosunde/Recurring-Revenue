#Importing List type
from typing import List

#Importing Calendar
from calendar import month

#Importing Numpy
import numpy as np

#Importing Seaborn
import seaborn as sns

#Importing Matplotlib
import matplotlib.pyplot as plt

#Importing rcParams
from matplotlib import rcParams

#Importing Math
import math

#Importing Datetime
from datetime import timedelta, date, datetime

#Importing CSV reader
from csv import reader

#Importing Pandas library
import pandas as pd

#Creating the dataframe
df = pd.read_csv("workspace_collaborators.csv")

#Open invoices file, then skip first line as header
with open("invoices.csv", "r") as read_obj_1:
    csv_invoices = reader(read_obj_1)
    header = next(csv_invoices)

    #Iterate through rows after header in invoices file
    if header != None:
        for row in csv_invoices:
            #Filter for inital invoice month
            if row[2] == "initial":
                for subsequent_month in next(iter(row[1])):
                    
                    #Open workspace collaborators file, then skip first line as header
                    with open("workspace_collaborators.csv", "r") as read_obj_2:
                        csv_wkspc_collab = reader(read_obj_2)
                        header = next(csv_wkspc_collab)

                        #Iterate through rows after header in workspace collaborators file
                        if header != None:
                            for row in csv_wkspc_collab:
                                #Function to calculate the mean of paid users
                                def calculate_mean(paid_users):
                                    return (1.0 * sum(len(row[1])) / len(row[1]))
                                
                                #Function to calculate the mean of paid workspaces
                                def calculate_mean(paid_wkspcs):
                                    return (1.0 * sum(len(row[2])) / len(row[2]))

                                #Function to calculate the standard deviation of paid users.
                                def calculate_stdev(paid_users, sample_1=True):
                                    if sample_1:
                                        n = len(row[1]) - 1
                                    else:
                                        n = len(row[1])

                                    mean = calculate_mean(row[1])

                                    sigma_1 = 0

                                    for d in row[1]:
                                        sigma_1 += (d - mean) ** 2

                                    sigma_1 = math.sqrt(sigma_1 / n)

                                    return sigma_1

                                #Function to calculate the standard deviation of paid workspaces.
                                def calculate_stdev(paid_wkspcs, sample_2=True):
                                    if sample_2:
                                        n = len(row[2]) - 1
                                    else:
                                        n = len(row[2])

                                    mean = calculate_stdev(row[2])

                                    sigma_2 = 0

                                    for d in row[2]:
                                        sigma_2 += (d - mean) ** 2

                                    sigma_2 = math.sqrt(sigma_2 / n)

                                    return sigma_2

                                #Function to calculate the median of paid users.
                                def calculate_median(paid_users):
                                    ordered1 = row[1].sort_values(ascending=True).reset_index(drop=True)
                                    return ordered1[(int(len(ordered1)/2))]
                                
                                #Function to calculate the median of paid wrokspaces.
                                def calculate_median(paid_wkspcs):
                                    ordered2 = row[2].sort_values(ascending=True).reset_index(drop=True)
                                    return ordered2[(int(len(ordered2)/2))]

                                #Function to prepare dataset for cohort visualization. Takes the dataframe and converts it to a NxN matrix dataframe.
                                def cohort_preprocess(df):
                                    df["metric_month"] = pd.to_datetime(df.metric_month)
                                    df["creation_date"] = pd.to_datetime(df.creation_date)
                                    df["last_active_month"] = pd.to_datetime(df.last_active_month)
                                    df.set_index("id", inplace=True)
                                    df["CohortGroup"] = df.groupby(level=0)["metric_month"].min().apply(lambda x: x.strftime("%Y-%m"))
                                    df.reset_index(inplace=True)
                                    cohorts = df.groupby(["CohortGroup", "metric_month"]).agg({"id":pd.Series.nunique})
                                    cohorts.rename(columns={"id": "TotalAccounts"}, inplace=True)
                                    
                                    def cohort_period(df):
                                        df["CohortPeriod"] = np.arange(len(df)) + 1
                                        return df

                                    cohorts = cohorts.groupby(level=0).apply(cohort_period)
                                    cohorts.reset_index(inplace=True)
                                    cohorts.set_index(["CohortGroup", "CohortPeriod"], inplace=True)
                                    cohort_group_size = cohorts["TotalAccounts"].groupby(level=0).first()
                                    user_retention = cohorts["TotalAccounts"].unstack(0).divide(cohort_group_size, axis=1)
                                    user_retention = user_retention.iloc[1:,:len(user_retention)-1]
                                    return user_retention

                                #Function to visualize the cohort analysis. Takes converted dataframe as an input and outputs the sns heatmap chart with cohort retention rates.
                                def cohort_viz(df):
                                    plt.style.use("fivethirtyeight")
                                    width, height = plt.figaspect(4)
                                    fig = plt.figure(figsize=(width,height), dpi=400)
                                    plt.style.use("fivethirtyeight")
                                    plt.rcParams["font.family"] = "serif"
                                    plt.rcParams["font.serif"] = "DejaVu Sans"
                                    plt.rcParams["font.monospace"] = "Ubuntu Mono"
                                    plt.rcParams["font.size"] = 4
                                    plt.rcParams["axes.labelsize"] = 6
                                    plt.rcParams["axes.labelweight"] = "bold"
                                    plt.rcParams["axes.titlesize"] = 6
                                    plt.rcParams["xtick.labelsize"] = 6
                                    plt.rcParams["ytick.labelsize"] = 6
                                    plt.rcParams["legend.fontsize"] = 10
                                    plt.rcParams["figure.titlesize"] = 12

                                    width, height = plt.figaspect(.6)
                                    fig = plt.figure(dpi=250)

                                    plt.title("Monthly Retention Rate", fontsize=12, fontweight="bold")
                                    sns.heatmap(df.T, mask=df.T.isnull(), annot=True, fmt=".2f", cmap="OrRd_r", xticklabels=list(range(1,len(df))))
                                    plt.xlabel("Periods in Months")
                                    plt.ylabel("Cohort Groups (Signup Month)")

"""
This solution build a cohort analysis of paid users and paid workspaces.
We first determine the initial invoice month from the invoices file.
For every subsequent month, we calculate the mean, standard deviation, adn median of paid users and paid workspaces.
We then pre-process the data set to convert it to an NxN matrix dataframe.
Finally, we visually the cohort analysis using the converted dataframe.
"""
